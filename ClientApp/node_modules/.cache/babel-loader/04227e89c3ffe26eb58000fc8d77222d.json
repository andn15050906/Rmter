{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nexport class LongPollingTransport {\n  constructor(httpClient, accessTokenFactory, logger, options) {\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  } // This is an internal type, not exported from 'index' so this is really just internal.\n\n\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._url = url;\n\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n    if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n      throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n    }\n\n    const [name, value] = getUserAgentHeader();\n    const headers = {\n      [name]: value,\n      ...this._options.headers\n    };\n    const pollOptions = {\n      abortSignal: this._pollAbort.signal,\n      headers,\n      timeout: 100000,\n      withCredentials: this._options.withCredentials\n    };\n\n    if (transferFormat === TransferFormat.Binary) {\n      pollOptions.responseType = \"arraybuffer\";\n    }\n\n    const token = await this._getAccessToken();\n\n    this._updateHeaderToken(pollOptions, token); // Make initial long polling request\n    // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n    const pollUrl = `${url}&_=${Date.now()}`;\n\n    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n    const response = await this._httpClient.get(pollUrl, pollOptions);\n\n    if (response.statusCode !== 200) {\n      this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n      this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n      this._running = false;\n    } else {\n      this._running = true;\n    }\n\n    this._receiving = this._poll(this._url, pollOptions);\n  }\n\n  async _getAccessToken() {\n    if (this._accessTokenFactory) {\n      return await this._accessTokenFactory();\n    }\n\n    return null;\n  }\n\n  _updateHeaderToken(request, token) {\n    if (!request.headers) {\n      request.headers = {};\n    }\n\n    if (token) {\n      request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\n      return;\n    }\n\n    if (request.headers[HeaderNames.Authorization]) {\n      delete request.headers[HeaderNames.Authorization];\n    }\n  }\n\n  async _poll(url, pollOptions) {\n    try {\n      while (this._running) {\n        // We have to get the access token on each poll, in case it changes\n        const token = await this._getAccessToken();\n\n        this._updateHeaderToken(pollOptions, token);\n\n        try {\n          const pollUrl = `${url}&_=${Date.now()}`;\n\n          this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n          const response = await this._httpClient.get(pollUrl, pollOptions);\n\n          if (response.statusCode === 204) {\n            this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n            this._running = false;\n          } else if (response.statusCode !== 200) {\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Unexpected status code\n\n\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n          } else {\n            // Process the response\n            if (response.content) {\n              this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\n\n              if (this.onreceive) {\n                this.onreceive(response.content);\n              }\n            } else {\n              // This is another way timeout manifest.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            }\n          }\n        } catch (e) {\n          if (!this._running) {\n            // Log but disregard errors that occur after stopping\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n          } else {\n            if (e instanceof TimeoutError) {\n              // Ignore timeouts and reissue the poll.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            } else {\n              // Close the connection with the error as the result.\n              this._closeError = e;\n              this._running = false;\n            }\n          }\n        }\n      }\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n      // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n      if (!this.pollAborted) {\n        this._raiseOnClose();\n      }\n    }\n  }\n\n  async send(data) {\n    if (!this._running) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n\n    return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\n  }\n\n  async stop() {\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n    this._running = false;\n\n    this._pollAbort.abort();\n\n    try {\n      await this._receiving; // Send DELETE to clean up long polling on the server\n\n      this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n      const deleteOptions = {\n        headers: { ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      };\n      const token = await this._getAccessToken();\n\n      this._updateHeaderToken(deleteOptions, token);\n\n      await this._httpClient.delete(this._url, deleteOptions);\n\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n      // It needs to happen after the DELETE request is sent\n\n\n      this._raiseOnClose();\n    }\n  }\n\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n\n      this._logger.log(LogLevel.Trace, logMessage);\n\n      this.onclose(this._closeError);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbortController","HttpError","TimeoutError","HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","constructor","httpClient","accessTokenFactory","logger","options","_httpClient","_accessTokenFactory","_logger","_pollAbort","_options","_running","onreceive","onclose","pollAborted","aborted","connect","url","transferFormat","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","headers","pollOptions","abortSignal","signal","timeout","withCredentials","token","_getAccessToken","_updateHeaderToken","pollUrl","Date","now","response","get","statusCode","_closeError","statusText","_receiving","_poll","request","Authorization","Information","content","logMessageContent","e","message","_raiseOnClose","send","data","Promise","reject","stop","abort","deleteOptions","delete","logMessage"],"sources":["D:/Code/C"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _getAccessToken() {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n        return null;\r\n    }\r\n    _updateHeaderToken(request, token) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url, deleteOptions);\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}