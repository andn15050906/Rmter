{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\n/** @private */\n\nexport class ServerSentEventsTransport {\n  constructor(httpClient, accessTokenFactory, logger, options) {\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n    this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\"); // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\n\n\n    this._url = url;\n\n    if (this._accessTokenFactory) {\n      const token = await this._accessTokenFactory();\n\n      if (token) {\n        url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      let opened = false;\n\n      if (transferFormat !== TransferFormat.Text) {\n        reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\n        return;\n      }\n\n      let eventSource;\n\n      if (Platform.isBrowser || Platform.isWebWorker) {\n        eventSource = new this._options.EventSource(url, {\n          withCredentials: this._options.withCredentials\n        });\n      } else {\n        // Non-browser passes cookies via the dictionary\n        const cookies = this._httpClient.getCookieString(url);\n\n        const headers = {};\n        headers.Cookie = cookies;\n        const [name, value] = getUserAgentHeader();\n        headers[name] = value;\n        eventSource = new this._options.EventSource(url, {\n          withCredentials: this._options.withCredentials,\n          headers: { ...headers,\n            ...this._options.headers\n          }\n        });\n      }\n\n      try {\n        eventSource.onmessage = e => {\n          if (this.onreceive) {\n            try {\n              this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\n\n              this.onreceive(e.data);\n            } catch (error) {\n              this._close(error);\n\n              return;\n            }\n          }\n        }; // @ts-ignore: not using event on purpose\n\n\n        eventSource.onerror = e => {\n          // EventSource doesn't give any useful information about server side closes.\n          if (opened) {\n            this._close();\n          } else {\n            reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\" + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\" + \" If you have multiple servers check that sticky sessions are enabled.\"));\n          }\n        };\n\n        eventSource.onopen = () => {\n          this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\n\n          this._eventSource = eventSource;\n          opened = true;\n          resolve();\n        };\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  }\n\n  async send(data) {\n    if (!this._eventSource) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n\n    return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\n  }\n\n  stop() {\n    this._close();\n\n    return Promise.resolve();\n  }\n\n  _close(e) {\n    if (this._eventSource) {\n      this._eventSource.close();\n\n      this._eventSource = undefined;\n\n      if (this.onclose) {\n        this.onclose(e);\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","Platform","sendMessage","ServerSentEventsTransport","constructor","httpClient","accessTokenFactory","logger","options","_httpClient","_accessTokenFactory","_logger","_options","onreceive","onclose","connect","url","transferFormat","isRequired","isIn","log","Trace","_url","token","indexOf","encodeURIComponent","Promise","resolve","reject","opened","Text","Error","eventSource","isBrowser","isWebWorker","EventSource","withCredentials","cookies","getCookieString","headers","Cookie","name","value","onmessage","e","data","logMessageContent","error","_close","onerror","onopen","Information","_eventSource","send","stop","close","undefined"],"sources":["D:/Code/C"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}